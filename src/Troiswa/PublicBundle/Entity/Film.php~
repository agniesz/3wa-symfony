<?php

namespace Troiswa\PublicBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

use Symfony\Component\Validator\Constraints as Assert;
/**
 * Film
 *
 * @ORM\Table(name="film")
 * @ORM\Entity(repositoryClass="Troiswa\PublicBundle\Entity\FilmRepository")
 */
class Film
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="titre", type="string", length=255)
     * @Assert\Length(
     *      min = "2",
     *      minMessage = "Votre nom doit faire au moins  2  caractères",)
     * @Assert\NotBlank(message="Le champ titre ne peut pas rester vide")
     */
    private $titre;

    /**
     * @var string
     *
     * @ORM\Column(name="synopsis", type="text")
     * @Assert\Length(
     *      max = "100",
     *      maxMessage = "Votre nom doit faire maximum 100 caractères",)
     * @Assert\NotBlank(message="Le champ synopsis ne peut pas rester vide")
     */
    private $synopsis;

    /**
     * @var string
     *
     * @ORM\Column(name="description", type="text")
     * @Assert\Length(
     *      min = "2",
     *      minMessage = "Votre nom doit faire au moins  2  caractères",)
     * @Assert\NotBlank(message="Le champ synopsis ne peut pas rester vide")
     */
    private $description;

    /**
     * @var \Date
     *
     * @ORM\Column(name="dateCreation", type="date")
     * @Assert\NotBlank(message="Le champ synopsis ne peut pas rester vide")
     */
    private $dateCreation;


      /**
     * @var \integer
     *
     * @ORM\Column(name="note", type="integer")
     * @Assert\Choice(choices = {"0", "1", "2", "3", "4", "5"}, message = "Choisissez une note entre 0 et 5")
     */
    private $note;


    /**
     * @var string
     *
     * @ORM\Column(name="image", type="string",length=255)
     */
    private $image;



    /**
     * @Assert\NotBlank()
     * @Assert\Image(maxSize="1000k", mimeTypes={"image/jpg", "image/png"})
     */
    private $fichier;


    /**
     *
     * @ORM\ManyToOne(targetEntity="Troiswa\PublicBundle\Entity\Categorie")
     */
    private $categorie;



   

    /**
     * Get id
     *
     * @return integer 
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set titre
     *
     * @param string $titre
     * @return Film
     */
    public function setTitre($titre)
    {
        $this->titre = $titre;

        return $this;
    }

    /**
     * Get titre
     *
     * @return string 
     */
    public function getTitre()
    {
        return $this->titre;
    }

    /**
     * Set synopsis
     *
     * @param string $synopsis
     * @return Film
     */
    public function setSynopsis($synopsis)
    {
        $this->synopsis = $synopsis;

        return $this;
    }

    /**
     * Get synopsis
     *
     * @return string 
     */
    public function getSynopsis()
    {
        return $this->synopsis;
    }

    /**
     * Set description
     *
     * @param string $description
     * @return Film
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string 
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set dataCreation
     *
     * @param \Date $dataCreation
     * @return Film
     */
    public function setDateCreation($dataCreation)
    {
        $this->dateCreation = $dataCreation;

        return $this;
    }

    /**
     * Get dataCreation
     *
     * @return \Date 
     */
    public function getDateCreation()
    {
        return $this->dateCreation;
    }

    /**
     * Set note
     *
     * @param integer $note
     * @return Film
     */
    public function setNote($note)
    {
        $this->note = $note;

        return $this;
    }

    /**
     * Get note
     *
     * @return integer 
     */
    public function getNote()
    {
        return $this->note;
    }

    /**
     * Set image
     *
     * @param string $image
     * @return Film
     */
    public function setImage($image)
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Get image
     *
     * @return string 
     */
    public function getImage()
    {
        return $this->image;
    }



    public function setFichier($fichier)
    {
        $this->fichier = $fichier;

        return $this;
    }

    public function getFichier()
    {
        return $this->fichier;
    }



    public function upload()
    {
       if (null ===$this->fichier)
       {
        return;
       }
   
        $this->fichier->move($this->getUploadRootDir(),
        $this->fichier->getClientOriginalName());

        $this->image=$this->fichier->getClientOriginalName();

     } 



 

    public function getUploadDir()   
    {
       
        return "upload/Films";
    }   



    public function getWebPath()   
    {

      if (null === $this->image)
       {
        return null;
       }
   
        return $this->getUploadDir().'/'.$this->image;
        
    }

    public function getUploadRootDir()   
    {
       
        return __DIR__.'/../../../../web/'.$this->getUploadDir();
    }
}
